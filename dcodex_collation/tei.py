import sys
from .models import *
import xml.etree.ElementTree as ET


def write_tei(
    family, 
    verses, 
    witnesses=None, 
    file=None, 
    allow_ignore=True, 
    atext=False,
    max_readings:int=0,
):
    witnesses = witnesses or family.manuscripts()

    root = ET.Element('TEI', xmlns="http://www.tei-c.org/ns/1.0")
    teiHeader = ET.SubElement(root, 'teiHeader')
    fileDesc = ET.SubElement(teiHeader, 'fileDesc')
    titleStmt = ET.SubElement(fileDesc, 'titleStmt')
    respStmt = ET.SubElement(titleStmt, 'respStmt')
    resp = ET.SubElement(respStmt, 'resp')
    resp.text = "Generated by dcodex."

    publicationStmt = ET.SubElement(fileDesc, 'publicationStmt')
    ET.SubElement(publicationStmt, 'p').text = "Generated by dcodex."

    sourceDesc = ET.SubElement(fileDesc, 'sourceDesc')
    ET.SubElement(sourceDesc, 'p').text = "Generated by dcodex."

    listWit = ET.SubElement(sourceDesc, 'listWit')

    body = ET.SubElement(root, 'body')

    all_sigla = set()
    
    for verse in verses:
        # print(verse)
        alignment = Alignment.objects.filter(family=family, verse=verse).first()
        if not alignment:
            continue
    
        for column in alignment.column_set.all():
            if column.only_punctuation():
                continue
        
            location = str(column)
            app = ET.SubElement(body, 'app', attrib={"xml:id": location})

            states = column.states(allow_ignore=allow_ignore)
            for state in states:
                reading_text = state.str_at(column)
                
                sigla = state.cells_at(column).values_list("row__transcription__manuscript__siglum", flat=True)
                rdg = ET.SubElement(app, 'rdg', wit=" ".join(sigla))
                rdg.text = reading_text

                all_sigla.update(sigla)

    for siglum in all_sigla:
        witness = ET.SubElement(listWit, 'witness', n=siglum)
        # if dates:
        #     start, end = None, None
        #     if siglum in dates_dict:
        #         start, end = dates_dict[siglum]

        #     if start is not None:
        #         if start == end:
        #             ET.SubElement(witness, 'origDate', when=start)
        #         else:
        #             ET.SubElement(witness, 'origDate', when=end) # hack
        #             # ET.SubElement(witness, 'origDate', notBefore=start, notAfter=end)
        #     else:
        #         print(f"witness {siglum} not in dates")
                # pass
        
    tree = ET.ElementTree(root)
    ET.indent(tree, space="\t", level=0)
    string = ET.tostring(root, encoding="utf-8")
    if file:
        with open(file, "w") as f:
            f.write(string)

    print(string.decode("utf-8"))

